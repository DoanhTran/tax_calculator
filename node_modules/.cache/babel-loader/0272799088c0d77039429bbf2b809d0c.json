{"ast":null,"code":"import _slicedToArray from\"/Users/doanhtran/Downloads/GitHub/tax-calculator/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import'./inputbox.css';export default function InputBox(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),zipcode=_useState2[0],setZipcode=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),save=_useState4[0],setSave=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),animation=_useState6[0],setAnimation=_useState6[1];var handleOnChange=function handleOnChange(event){console.log(\"animation\",animation);var input=event.currentTarget.value;var returnInput=maxFive(input);setZipcode(onlyNum(returnInput));};var handleSubmit=function handleSubmit(event){setSave(true);};/* Extract only numbers out of input\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/function onlyNum(text){var lastChar=text.slice(-1);var ascii=lastChar.charCodeAt(0);if(48<=ascii&&ascii<=57){return text;}else{return text.slice(0,-1);}}function maxFive(text){if(text.length>5){setAnimation('shake');setTimeout(function(){setAnimation();},200);return text.slice(0,5);}return text;}return/*#__PURE__*/React.createElement(\"form\",{className:\"zipcodeForm\",onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"label\",null,\"Zipcode \\xA0\"),/*#__PURE__*/React.createElement(\"input\",{className:animation,type:\"text\",maxLength:\"6\",value:zipcode,size:\"10\",onChange:handleOnChange}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Submit\"));}","map":{"version":3,"sources":["/Users/doanhtran/Downloads/GitHub/tax-calculator/src/components/inputbox/inputBox.jsx"],"names":["React","useState","useEffect","InputBox","zipcode","setZipcode","save","setSave","animation","setAnimation","handleOnChange","event","console","log","input","currentTarget","value","returnInput","maxFive","onlyNum","handleSubmit","text","lastChar","slice","ascii","charCodeAt","length","setTimeout"],"mappings":"mIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA0C,OAA1C,CACA,MAAO,gBAAP,CAEA,cAAe,SAASC,CAAAA,QAAT,EAAoB,eAEDF,QAAQ,EAFP,wCAExBG,OAFwB,eAEfC,UAFe,8BAGPJ,QAAQ,CAAC,KAAD,CAHD,yCAGxBK,IAHwB,eAGlBC,OAHkB,8BAIGN,QAAQ,EAJX,yCAIxBO,SAJwB,eAIbC,YAJa,eAM/B,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CAE9BC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBL,SAAzB,EAEA,GAAMM,CAAAA,KAAK,CAAGH,KAAK,CAACI,aAAN,CAAoBC,KAAlC,CACA,GAAMC,CAAAA,WAAW,CAAGC,OAAO,CAACJ,KAAD,CAA3B,CACAT,UAAU,CAACc,OAAO,CAACF,WAAD,CAAR,CAAV,CAEH,CARD,CAYA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACT,KAAD,CAAU,CAC3BJ,OAAO,CAAC,IAAD,CAAP,CACH,CAFD,CAMA;;sDAGA,QAASY,CAAAA,OAAT,CAAiBE,IAAjB,CAAuB,CAEnB,GAAIC,CAAAA,QAAQ,CAAGD,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,CAAf,CACA,GAAIC,CAAAA,KAAK,CAAGF,QAAQ,CAACG,UAAT,CAAoB,CAApB,CAAZ,CACA,GAAI,IAAMD,KAAN,EAAeA,KAAK,EAAI,EAA5B,CAAgC,CAChC,MAAOH,CAAAA,IAAP,CACC,CAFD,IAEO,CACP,MAAOA,CAAAA,IAAI,CAACE,KAAL,CAAW,CAAX,CAAc,CAAC,CAAf,CAAP,CACC,CACJ,CAED,QAASL,CAAAA,OAAT,CAAiBG,IAAjB,CAAsB,CAElB,GAAIA,IAAI,CAACK,MAAL,CAAc,CAAlB,CAAoB,CAChBjB,YAAY,CAAC,OAAD,CAAZ,CACAkB,UAAU,CAAC,UAAW,CAClBlB,YAAY,GACf,CAFS,CAEP,GAFO,CAAV,CAGA,MAAOY,CAAAA,IAAI,CAACE,KAAL,CAAW,CAAX,CAAa,CAAb,CAAP,CACH,CACD,MAAOF,CAAAA,IAAP,CACH,CAED,mBACI,4BAAM,SAAS,CAAG,aAAlB,CAAgC,QAAQ,CAAID,YAA5C,eAEI,gDAFJ,cAKI,6BACI,SAAS,CAAGZ,SADhB,CAEI,IAAI,CAAG,MAFX,CAGI,SAAS,CAAG,GAHhB,CAII,KAAK,CAAIJ,OAJb,CAKI,IAAI,CAAG,IALX,CAMI,QAAQ,CAAIM,cANhB,EALJ,cAaI,8BAAQ,IAAI,CAAG,QAAf,WAbJ,CADJ,CAoBF","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport './inputbox.css';\n\nexport default function InputBox (){\n\n    const [zipcode, setZipcode] = useState();\n    const [save, setSave] = useState(false);\n    const [animation, setAnimation] = useState();\n\n    const handleOnChange = (event) => {\n     \n        console.log(\"animation\", animation);\n        \n        const input = event.currentTarget.value;\n        const returnInput = maxFive(input);\n        setZipcode(onlyNum(returnInput));\n\n    }\n\n\n\n    const handleSubmit = (event) =>{\n        setSave(true);\n    }\n\n\n\n    /* Extract only numbers out of input\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n    function onlyNum(text) {\n\n        let lastChar = text.slice(-1);\n        let ascii = lastChar.charCodeAt(0);\n        if (48 <= ascii && ascii <= 57) {\n        return text;\n        } else {\n        return text.slice(0, -1);\n        }\n    }\n\n    function maxFive(text){\n\n        if (text.length > 5){\n            setAnimation('shake');\n            setTimeout(function() {\n                setAnimation();\n            }, 200);\n            return text.slice(0,5);\n        }\n        return text;\n    }\n      \n    return(\n        <form className = \"zipcodeForm\" onSubmit = {handleSubmit}>\n\n            <label>\n                Zipcode &#160;\n            </label>\n            <input\n                className ={animation}\n                type = \"text\"\n                maxLength = \"6\"\n                value = {zipcode}\n                size = '10'\n                onChange = {handleOnChange}\n            />\n            <button type = \"submit\">\n                Submit\n            </button>\n\n        </form>\n    )\n }\n"]},"metadata":{},"sourceType":"module"}