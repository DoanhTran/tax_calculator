{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/tax_calculator/src/components/inputbox/inputBox.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./inputbox.css\";\nimport DisplayTax from \"../displaytax.js\";\n/*global chrome*/\n\nexport default function InputBox() {\n  const [zipcode, setZipcode] = useState(\"\");\n  const [save, setSave] = useState(false);\n  useEffect(() => {\n    chrome.storage.sync.get('currentTax', function (result) {\n      console.log(\"get dat is called\");\n      console.log('Value currently is ' + result.currentTax);\n      console.log(result);\n      console.log(result.currentTax);\n\n      if (result.currentTax !== undefined) {\n        setZipcode(result.currentTax.zip);\n        setSave(null);\n      }\n    });\n  }, []);\n  const [animation, setAnimation] = useState();\n\n  const handleOnChange = event => {\n    console.log(\"animation\", animation);\n    const input = event.currentTarget.value;\n    const returnInput = maxFive(input);\n    setZipcode(onlyNum(returnInput));\n  };\n\n  const handleSubmit = event => {\n    setSave(true);\n  };\n\n  const handleFocus = event => {\n    setSave(false);\n  };\n  /* Extract only numbers out of input box and returns a string of text \n    containing at most 6 numbers\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n\n\n  function onlyNum(text) {\n    let lastChar = text.slice(-1);\n    let ascii = lastChar.charCodeAt(0);\n\n    if (48 <= ascii && ascii <= 57) {\n      return text;\n    } else {\n      return text.slice(0, -1);\n    }\n  }\n\n  function maxFive(text) {\n    if (text.length > 5) {\n      setAnimation(\"shake\");\n      setTimeout(function () {\n        setAnimation();\n      }, 200);\n      return text.slice(0, 5);\n    }\n\n    return text;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Zipcode \\xA0\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    maxLength: \"5\",\n    value: zipcode,\n    size: \"10\",\n    onChange: handleOnChange,\n    onFocus: handleFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, zipcode), save || save === null ? \"\" : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 34\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(DisplayTax, {\n    save: save,\n    zipcode: zipcode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mina/Desktop/tax_calculator/src/components/inputbox/inputBox.jsx"],"names":["React","useState","useEffect","DisplayTax","InputBox","zipcode","setZipcode","save","setSave","chrome","storage","sync","get","result","console","log","currentTax","undefined","zip","animation","setAnimation","handleOnChange","event","input","currentTarget","value","returnInput","maxFive","onlyNum","handleSubmit","handleFocus","text","lastChar","slice","ascii","charCodeAt","length","setTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAGjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBC,GAApB,CAAwB,YAAxB,EAAsC,UAASC,MAAT,EAAiB;AACrDC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACED,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBF,MAAM,CAACG,UAA3C;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,UAAnB;;AACA,UAAIH,MAAM,CAACG,UAAP,KAAoBC,SAAxB,EAAkC;AAChCX,QAAAA,UAAU,CAACO,MAAM,CAACG,UAAP,CAAkBE,GAAnB,CAAV;AACAV,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KATH;AAaD,GAdQ,EAcP,EAdO,CAAT;AAiBA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,EAA1C;;AAEA,QAAMoB,cAAc,GAAIC,KAAD,IAAW;AAChCR,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,SAAzB;AAEA,UAAMI,KAAK,GAAGD,KAAK,CAACE,aAAN,CAAoBC,KAAlC;AACA,UAAMC,WAAW,GAAGC,OAAO,CAACJ,KAAD,CAA3B;AACAjB,IAAAA,UAAU,CAACsB,OAAO,CAACF,WAAD,CAAR,CAAV;AACD,GAND;;AAQA,QAAMG,YAAY,GAAIP,KAAD,IAAW;AAC9Bd,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMsB,WAAW,GAAIR,KAAD,IAAW;AAC7Bd,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;AAIA;;;;;;AAIA,WAASoB,OAAT,CAAiBG,IAAjB,EAAuB;AACrB,QAAIC,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,CAAf;AACA,QAAIC,KAAK,GAAGF,QAAQ,CAACG,UAAT,CAAoB,CAApB,CAAZ;;AAEA,QAAI,MAAMD,KAAN,IAAeA,KAAK,IAAI,EAA5B,EAAgC;AAC9B,aAAOH,IAAP;AACD,KAFD,MAEO;AACL,aAAOA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD;AACF;;AAED,WAASN,OAAT,CAAiBI,IAAjB,EAAuB;AACrB,QAAIA,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACnBhB,MAAAA,YAAY,CAAC,OAAD,CAAZ;AACAiB,MAAAA,UAAU,CAAC,YAAY;AACrBjB,QAAAA,YAAY;AACb,OAFS,EAEP,GAFO,CAAV;AAGA,aAAOW,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAP;AACD;;AACD,WAAOF,IAAP;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAC,GAFZ;AAGE,IAAA,KAAK,EAAE1B,OAHT;AAIE,IAAA,IAAI,EAAC,IAJP;AAKE,IAAA,QAAQ,EAAEgB,cALZ;AAME,IAAA,OAAO,EAAES,WANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMzB,OAAN,CAVF,EAaGE,IAAI,IAAGA,IAAI,KAAG,IAAd,GAAqB,EAArB,gBAA0B;AAAQ,IAAA,OAAO,EAAEsB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAb7B,eAeE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEtB,IAAlB;AAAwB,IAAA,OAAO,EAAEF,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AAmBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./inputbox.css\";\nimport DisplayTax from \"../displaytax.js\";\n/*global chrome*/\n\nexport default function InputBox() {\n\n\n  const [zipcode, setZipcode] = useState(\"\");\n  const [save, setSave] = useState(false);\n  useEffect(() => {\n    chrome.storage.sync.get('currentTax', function(result) {\n      console.log(\"get dat is called\");\n        console.log('Value currently is ' + result.currentTax);\n        console.log(result)\n        console.log(result.currentTax)\n        if (result.currentTax!==undefined){\n          setZipcode(result.currentTax.zip);\n          setSave(null);\n        }\n      });\n   \n\n\n  },[]);\n  \n\n  const [animation, setAnimation] = useState();\n\n  const handleOnChange = (event) => {\n    console.log(\"animation\", animation);\n\n    const input = event.currentTarget.value;\n    const returnInput = maxFive(input);\n    setZipcode(onlyNum(returnInput));\n  };\n\n  const handleSubmit = (event) => {\n    setSave(true);\n  };\n\n  const handleFocus = (event) => {\n    setSave(false);\n  };\n\n  /* Extract only numbers out of input box and returns a string of text \n    containing at most 6 numbers\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n  function onlyNum(text) {\n    let lastChar = text.slice(-1);\n    let ascii = lastChar.charCodeAt(0);\n\n    if (48 <= ascii && ascii <= 57) {\n      return text;\n    } else {\n      return text.slice(0, -1);\n    }\n  }\n\n  function maxFive(text) {\n    if (text.length > 5) {\n      setAnimation(\"shake\");\n      setTimeout(function () {\n        setAnimation();\n      }, 200);\n      return text.slice(0, 5);\n    }\n    return text;\n  }\n\n  return (\n    <div>\n      <label>Zipcode &#160;</label>\n      <input\n        type=\"text\"\n        maxLength=\"5\"\n        value={zipcode}\n        size=\"10\"\n        onChange={handleOnChange}\n        onFocus={handleFocus}\n      />\n      <div>{zipcode}</div>\n      {/* <button type=\"submit\">Submit</button> */}\n\n      {save|| save===null ? \"\" : <button onClick={handleSubmit}>Submit</button>}\n      {/* </form> */}\n      <DisplayTax save={save} zipcode={zipcode}></DisplayTax>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}