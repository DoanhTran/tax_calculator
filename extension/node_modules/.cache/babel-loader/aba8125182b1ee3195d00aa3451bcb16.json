{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/tax_calculator/src/components/displaytax.js\";\nimport React from \"react\";\nimport \"../App.css\";\nconst initial = \"nodata;\";\nconst fetching = \"fetching data\";\n/*global chrome*/\n\nclass DisplayTax extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      taxRate: initial,\n      taxRegion: initial\n    };\n    console.log(\"display\");\n  } // componentDidMount(){\n  //   chrome.storage.sync.get('currentTax', function(result) {\n  //     console.log(\"get dat is called in display\");\n  //       console.log('Value currently is ' + result.currentTax);\n  //       console.log(result)\n  //       console.log(result.currentTax)\n  //       if (result.currentTax!==undefined){\n  //         this.setState({taxRate:result.currentTax.rate, taxRegion:result.currentTax.tReg});\n  //       }\n  //     }.bind(this));\n  // }\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.save !== prevProps.save && this.props.save === true) {\n      console.log(\"saveindisplay\");\n      const zip = this.props.zipcode;\n      this.setState({\n        taxRate: fetching,\n        taxRegion: fetching\n      });\n      fetch(\"http://0.0.0.0:5000/taxrate/\" + zip, {\n        methode: \"GET\" // headers: { \"Access-Control-Allow-Origin\": \"*\" },\n\n      }).then(res => res.json()).then(result => {\n        console.log(\"inresult\");\n        console.log(result);\n\n        if (result.error) {\n          console.log(\"not valid zipcode.\");\n        } else {// chrome.storage.sync.set({currentTax: {rate:result.data.EstimatedCombinedRate, tReg:result.data.TaxRegionName, zip:zip} }, function() {\n          //   console.log(\"tax rate is saved.\")\n          // });\n        }\n\n        this.setState({\n          isLoaded: true,\n          taxRate: result.error ? result.error : result.data.EstimatedCombinedRate,\n          taxRegion: result.error ? result.error : result.data.TaxRegionName\n        });\n      }, error => {\n        console.log(\"inerror\");\n        console.log(error);\n        this.setState({\n          error: true,\n          isLoaded: true\n        });\n      }); // } else if (\n      //   this.props.save !== prevProps.save &&\n      //   this.props.save === false\n      // ) {\n      //     this.setState({ taxRate: fetching, taxRegion: fetching })\n      // }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, !this.state.error ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rate-display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \"tax rate: \", this.state.taxRate), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, \"tax regian name:\", this.state.taxRegion)) : /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"error: $\", this.state.error));\n  }\n\n}\n\nexport default DisplayTax;","map":{"version":3,"sources":["/Users/mina/Desktop/tax_calculator/src/components/displaytax.js"],"names":["React","initial","fetching","DisplayTax","Component","constructor","props","state","error","isLoaded","taxRate","taxRegion","console","log","componentDidUpdate","prevProps","save","zip","zipcode","setState","fetch","methode","then","res","json","result","data","EstimatedCombinedRate","TaxRegionName","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nconst initial = \"nodata;\";\nconst fetching = \"fetching data\";\n\n\n/*global chrome*/\n\nclass DisplayTax extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      taxRate: initial,\n      taxRegion: initial,\n    };\n    console.log(\"display\");\n   \n  }\n\n  // componentDidMount(){\n  //   chrome.storage.sync.get('currentTax', function(result) {\n  //     console.log(\"get dat is called in display\");\n  //       console.log('Value currently is ' + result.currentTax);\n  //       console.log(result)\n  //       console.log(result.currentTax)\n  //       if (result.currentTax!==undefined){\n  //         this.setState({taxRate:result.currentTax.rate, taxRegion:result.currentTax.tReg});\n  //       }\n  //     }.bind(this));\n  // }\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.save !== prevProps.save && this.props.save === true) {\n      console.log(\"saveindisplay\");\n      const zip = this.props.zipcode\n      this.setState({ taxRate: fetching, taxRegion: fetching });\n\n      fetch(\"http://0.0.0.0:5000/taxrate/\" + zip, {\n        methode: \"GET\",\n\n        // headers: { \"Access-Control-Allow-Origin\": \"*\" },\n      })\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            console.log(\"inresult\");\n            console.log(result);\n            if (result.error){\n              console.log(\"not valid zipcode.\")\n            }\n            else{\n              // chrome.storage.sync.set({currentTax: {rate:result.data.EstimatedCombinedRate, tReg:result.data.TaxRegionName, zip:zip} }, function() {\n              //   console.log(\"tax rate is saved.\")\n              // });\n              \n            }\n            this.setState({\n              isLoaded: true,\n\n              taxRate: result.error\n                ? result.error\n                : result.data.EstimatedCombinedRate,\n              taxRegion: result.error\n                ? result.error\n                : result.data.TaxRegionName,\n            });\n          },\n          (error) => {\n            console.log(\"inerror\");\n            console.log(error);\n            this.setState({ error: true, isLoaded: true });\n          }\n        );\n      // } else if (\n      //   this.props.save !== prevProps.save &&\n      //   this.props.save === false\n      // ) {\n      //     this.setState({ taxRate: fetching, taxRegion: fetching })\n\n      // }\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {!this.state.error ? (\n          <div className =\"rate-display\">\n            <h6>tax rate: {this.state.taxRate}</h6>\n            <h6>tax regian name:{this.state.taxRegion}</h6>\n          </div>\n        ) : (\n          <h6>error: ${this.state.error}</h6>\n        )}\n      </>\n    );\n  }\n}\n\nexport default DisplayTax;\n"]},"metadata":{},"sourceType":"module"}