{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/tax_calculator/src/components/inputbox/inputbox2.jsx\";\nimport React, { useState, useEffect, createRef } from \"react\";\nimport \"./inputbox.css\";\nimport DisplayTax from \"../displaytax.js\";\n/*global chrome*/\n//I'm not sure if to use useRef or createRef\n\nconst fakeSavedList = [{\n  rate: 0.08,\n  name: \"home\",\n  region: \"Ithaca\",\n  zipCode: \"14850\"\n}, {\n  rate: 0.09,\n  name: \"scl\",\n  region: \"Ithaca2\",\n  zipCode: \"12345\"\n}];\nexport default function NewInputBox() {\n  const inputBoxRef = React.createRef();\n  const searchContainerRef = React.createRef();\n  const [zipcode, setZipcode] = useState(\"\");\n  const [save, setSave] = useState(false); //   useEffect(() => {\n  //     chrome.storage.sync.get('currentTax', function(result) {\n  //       console.log(\"get dat is called\");\n  //         console.log('Value currently is ' + result.currentTax);\n  //         console.log(result)\n  //         console.log(result.currentTax)\n  //         if (result.currentTax!==undefined){\n  //           setZipcode(result.currentTax.zip);\n  //           setSave(null);\n  //         }\n  //       });\n  //   },[]);\n\n  useEffect(() => {\n    if (save || save === null) {\n      searchContainerRef.current.classList.replace('green-outline', 'no-outline');\n    }\n  }, [save]);\n  const [animation, setAnimation] = useState();\n\n  const handleOnChange = event => {\n    //console.log(\"animation\", animation);\n    const input = event.currentTarget.value;\n    const returnInput = maxFive(input);\n    setZipcode(onlyNum(returnInput));\n  };\n\n  const handleSubmit = event => {\n    setSave(true);\n  };\n\n  const optionClick = event => {\n    //change the textbox to match the saved data\n    console.log(\"option click\");\n    console.log(event.currentTarget.dataset.zip); //setZipcode(event.target.attrbutes['data-zip'])\n\n    setSave(true);\n  };\n\n  function make_htmlList() {\n    console.log(\"make html is called\");\n    let html = [];\n    fakeSavedList.forEach(element => {\n      const savedButt = /*#__PURE__*/React.createElement(\"button\", {\n        className: \"savedOptions\",\n        \"data-zip\": element.zipCode,\n        \"data-region\": element.region,\n        \"data-rate\": element.rate,\n        onClick: optionClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 161\n        }\n      }, element.name), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 188\n        }\n      }, element.zipCode));\n      html.push(savedButt);\n    });\n    html.push( /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, \"Add/edit saved zip\"));\n    return html;\n  }\n\n  const handleFocus = event => {\n    searchContainerRef.current.classList.replace('no-outline', 'green-outline');\n    inputBoxRef.current.focus();\n    setSave(false);\n  };\n  /* Extract only numbers out of input box and returns a string of text \n    containing at most 6 numbers\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n\n\n  function onlyNum(text) {\n    let lastChar = text.slice(-1);\n    let ascii = lastChar.charCodeAt(0);\n\n    if (48 <= ascii && ascii <= 57) {\n      return text;\n    } else {\n      return text.slice(0, -1);\n    }\n  }\n\n  function maxFive(text) {\n    if (text.length > 5) {\n      setAnimation(\"shake\");\n      console.log(\"text is longer than 5 characters\");\n      console.log(\"animation 1:\", animation);\n      setTimeout(function () {\n        setAnimation();\n        console.log(\"animation 2:\", animation);\n      }, 200);\n      return text.slice(0, 5);\n    }\n\n    return text;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"Zipcode \\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"multisearch-container no-outline\",\n    ref: searchContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchBar-container normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputBoxRef,\n    className: animation,\n    type: \"text\",\n    maxLength: \"6\",\n    height: \"3\",\n    value: zipcode,\n    size: \"10\",\n    onChange: handleOnChange,\n    onFocus: handleFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }), save || save === null ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"glass-icon glass-grey\",\n    onClick: handleFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 39\n    }\n  }, \"focus\") : /*#__PURE__*/React.createElement(\"button\", {\n    className: \"glass-icon glass-green\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 120\n    }\n  }, \"Submit\")), save || save === null ? '' : /*#__PURE__*/React.createElement(\"div\", {\n    option: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 43\n    }\n  }, make_htmlList())));\n}","map":{"version":3,"sources":["/Users/mina/Desktop/tax_calculator/src/components/inputbox/inputbox2.jsx"],"names":["React","useState","useEffect","createRef","DisplayTax","fakeSavedList","rate","name","region","zipCode","NewInputBox","inputBoxRef","searchContainerRef","zipcode","setZipcode","save","setSave","current","classList","replace","animation","setAnimation","handleOnChange","event","input","currentTarget","value","returnInput","maxFive","onlyNum","handleSubmit","optionClick","console","log","dataset","zip","make_htmlList","html","forEach","element","savedButt","push","handleFocus","focus","text","lastChar","slice","ascii","charCodeAt","length","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createRef } from \"react\";\nimport \"./inputbox.css\";\nimport DisplayTax from \"../displaytax.js\";\n/*global chrome*/\n\n//I'm not sure if to use useRef or createRef\n\nconst fakeSavedList = [{rate:0.08, name:\"home\", region:\"Ithaca\",zipCode:\"14850\"}, {rate:0.09, name:\"scl\", region:\"Ithaca2\",zipCode:\"12345\"}]\n\n\nexport default function NewInputBox() {\n\n  const inputBoxRef = React.createRef()\n  const searchContainerRef = React.createRef()\n  const [zipcode, setZipcode] = useState(\"\");\n  const [save, setSave] = useState(false);\n//   useEffect(() => {\n//     chrome.storage.sync.get('currentTax', function(result) {\n//       console.log(\"get dat is called\");\n//         console.log('Value currently is ' + result.currentTax);\n//         console.log(result)\n//         console.log(result.currentTax)\n//         if (result.currentTax!==undefined){\n//           setZipcode(result.currentTax.zip);\n//           setSave(null);\n//         }\n//       });\n//   },[]);\n\n  \n  \n  useEffect(()=>{\n    if (save|| save===null){\n      searchContainerRef.current.classList.replace('green-outline', 'no-outline')\n    }\n    \n\n  },[save])\n\n\n  const [animation, setAnimation] = useState();\n\n  const handleOnChange = (event) => {\n    //console.log(\"animation\", animation);\n    const input = event.currentTarget.value;\n    const returnInput = maxFive(input);\n    setZipcode(onlyNum(returnInput));\n  };\n\n  const handleSubmit = (event) => {\n    setSave(true);\n  };\n\n  const optionClick = (event) =>{\n    //change the textbox to match the saved data\n    console.log(\"option click\")\n    \n    console.log(event.currentTarget.dataset.zip)\n    //setZipcode(event.target.attrbutes['data-zip'])\n    setSave(true)\n  }\n\n  function make_htmlList(){\n    console.log(\n      \"make html is called\"\n    )\n    let html= [];\n    fakeSavedList.forEach(element => {\n      const savedButt = <button className=\"savedOptions\" data-zip={element.zipCode} data-region={element.region} data-rate={element.rate} onClick={optionClick}><span>{element.name}</span><span>{element.zipCode}</span></button>\n      html.push(savedButt);\n    });\n    html.push(<button>Add/edit saved zip</button>)\n \n    return html\n  }\n\n  const handleFocus = (event) => {\n    searchContainerRef.current.classList.replace('no-outline', 'green-outline')\n    inputBoxRef.current.focus()\n    \n    setSave(false);\n  };\n\n  /* Extract only numbers out of input box and returns a string of text \n    containing at most 6 numbers\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n  function onlyNum(text) {\n    let lastChar = text.slice(-1);\n    let ascii = lastChar.charCodeAt(0);\n\n    if (48 <= ascii && ascii <= 57) {\n      return text;\n    } else {\n      return text.slice(0, -1);\n    }\n  }\n\n  function maxFive(text) {\n    if (text.length > 5) {\n      setAnimation(\"shake\");\n      console.log(\"text is longer than 5 characters\")\n      console.log(\"animation 1:\", animation);\n      setTimeout(function () {\n        setAnimation();\n        console.log(\"animation 2:\", animation);\n      }, 200);\n      return text.slice(0, 5);\n    }\n    return text;\n  }\n\n  return (\n    \n    \n    <div>\n      <label>Zipcode &#160;</label>\n      <div className = \"multisearch-container no-outline\" ref={searchContainerRef}>\n      <div className=\"searchBar-container normal\">\n              <input\n                  ref={inputBoxRef}\n                  className = {animation}\n                  type=\"text\"\n                  maxLength=\"6\"\n                  height = \"3\"\n                  value={zipcode}\n                  size=\"10\"\n                  onChange={handleOnChange}\n                  onFocus={handleFocus}\n                />\n                \n                {save|| save===null ? <button className=\"glass-icon glass-grey\" onClick={handleFocus}>focus</button> : <button className=\"glass-icon glass-green\"onClick={handleSubmit}>Submit</button>}\n                </div>\n                {save|| save===null ? '': <div option>{make_htmlList()}</div>}\n\n                </div>\n    \n      \n\n      {/* <button type=\"submit\">Submit</button> */}\n\n      {/* {save|| save===null ? \"\" : <button onClick={handleSubmit}>Submit</button>} */}\n      {/* </form> */}\n      {/* <DisplayTax save={save} zipcode={zipcode}></DisplayTax> */}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}