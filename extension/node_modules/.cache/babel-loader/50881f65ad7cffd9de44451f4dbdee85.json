{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/tax_calculator/src/components/inputbox/inputBox.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./inputbox.css\";\nimport DisplayTax from \"../displaytax.js\";\nexport default function InputBox() {\n  const [zipcode, setZipcode] = useState(\"\");\n  const [save, setSave] = useState(false);\n  const [animation, setAnimation] = useState();\n\n  const handleOnChange = event => {\n    console.log(\"animation\", animation);\n    const input = event.currentTarget.value;\n    const returnInput = maxFive(input);\n    setZipcode(onlyNum(returnInput));\n  };\n\n  const handleSubmit = event => {\n    setSave(true);\n  };\n\n  const handleFocus = event => {\n    setSave(false);\n  };\n  /* Extract only numbers out of input box and returns a string of text \n    containing at most 6 numbers\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n\n\n  function onlyNum(text) {\n    let lastChar = text.slice(-1);\n    let ascii = lastChar.charCodeAt(0);\n\n    if (48 <= ascii && ascii <= 57) {\n      return text;\n    } else {\n      return text.slice(0, -1);\n    }\n  }\n\n  function maxFive(text) {\n    if (text.length > 5) {\n      setAnimation(\"shake\");\n      setTimeout(function () {\n        setAnimation();\n      }, 200);\n      return text.slice(0, 5);\n    }\n\n    return text;\n  }\n\n  return (\n    /*#__PURE__*/\n    // <form className=\"zipcodeForm\" onSubmit={handleSubmit}>\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, \"Zipcode \\xA0\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      maxLength: \"5\",\n      value: zipcode,\n      size: \"10\",\n      onChange: handleOnChange,\n      onFocus: handleFocus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, zipcode), save ? \"\" : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(DisplayTax, {\n      save: save,\n      zipcode: zipcode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }))\n  );\n}","map":{"version":3,"sources":["/Users/mina/Desktop/tax_calculator/src/components/inputbox/inputBox.jsx"],"names":["React","useState","useEffect","DisplayTax","InputBox","zipcode","setZipcode","save","setSave","animation","setAnimation","handleOnChange","event","console","log","input","currentTarget","value","returnInput","maxFive","onlyNum","handleSubmit","handleFocus","text","lastChar","slice","ascii","charCodeAt","length","setTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,EAA1C;;AAEA,QAAMU,cAAc,GAAIC,KAAD,IAAW;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,SAAzB;AAEA,UAAMM,KAAK,GAAGH,KAAK,CAACI,aAAN,CAAoBC,KAAlC;AACA,UAAMC,WAAW,GAAGC,OAAO,CAACJ,KAAD,CAA3B;AACAT,IAAAA,UAAU,CAACc,OAAO,CAACF,WAAD,CAAR,CAAV;AACD,GAND;;AAQA,QAAMG,YAAY,GAAIT,KAAD,IAAW;AAC9BJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMc,WAAW,GAAIV,KAAD,IAAW;AAC7BJ,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;AAIA;;;;;;AAIA,WAASY,OAAT,CAAiBG,IAAjB,EAAuB;AACrB,QAAIC,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,CAAf;AACA,QAAIC,KAAK,GAAGF,QAAQ,CAACG,UAAT,CAAoB,CAApB,CAAZ;;AAEA,QAAI,MAAMD,KAAN,IAAeA,KAAK,IAAI,EAA5B,EAAgC;AAC9B,aAAOH,IAAP;AACD,KAFD,MAEO;AACL,aAAOA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD;AACF;;AAED,WAASN,OAAT,CAAiBI,IAAjB,EAAuB;AACrB,QAAIA,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACnBlB,MAAAA,YAAY,CAAC,OAAD,CAAZ;AACAmB,MAAAA,UAAU,CAAC,YAAY;AACrBnB,QAAAA,YAAY;AACb,OAFS,EAEP,GAFO,CAAV;AAGA,aAAOa,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAP;AACD;;AACD,WAAOF,IAAP;AACD;;AAED;AAAA;AACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,GAFZ;AAGE,MAAA,KAAK,EAAElB,OAHT;AAIE,MAAA,IAAI,EAAC,IAJP;AAKE,MAAA,QAAQ,EAAEM,cALZ;AAME,MAAA,OAAO,EAAEW,WANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMjB,OAAN,CAVF,EAYGE,IAAI,GAAG,EAAH,gBAAQ;AAAQ,MAAA,OAAO,EAAEc,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZf,eAcE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAEd,IAAlB;AAAwB,MAAA,OAAO,EAAEF,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF;AAFF;AAmBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./inputbox.css\";\nimport DisplayTax from \"../displaytax.js\";\n\nexport default function InputBox() {\n  const [zipcode, setZipcode] = useState(\"\");\n  const [save, setSave] = useState(false);\n\n  const [animation, setAnimation] = useState();\n\n  const handleOnChange = (event) => {\n    console.log(\"animation\", animation);\n\n    const input = event.currentTarget.value;\n    const returnInput = maxFive(input);\n    setZipcode(onlyNum(returnInput));\n  };\n\n  const handleSubmit = (event) => {\n    setSave(true);\n  };\n\n  const handleFocus = (event) => {\n    setSave(false);\n  };\n\n  /* Extract only numbers out of input box and returns a string of text \n    containing at most 6 numbers\n    Parameter: text is a string\n    Returns a string of only numbers or empty string*/\n  function onlyNum(text) {\n    let lastChar = text.slice(-1);\n    let ascii = lastChar.charCodeAt(0);\n\n    if (48 <= ascii && ascii <= 57) {\n      return text;\n    } else {\n      return text.slice(0, -1);\n    }\n  }\n\n  function maxFive(text) {\n    if (text.length > 5) {\n      setAnimation(\"shake\");\n      setTimeout(function () {\n        setAnimation();\n      }, 200);\n      return text.slice(0, 5);\n    }\n    return text;\n  }\n\n  return (\n    // <form className=\"zipcodeForm\" onSubmit={handleSubmit}>\n    <div>\n      <label>Zipcode &#160;</label>\n      <input\n        type=\"text\"\n        maxLength=\"5\"\n        value={zipcode}\n        size=\"10\"\n        onChange={handleOnChange}\n        onFocus={handleFocus}\n      />\n      <div>{zipcode}</div>\n\n      {save ? \"\" : <button onClick={handleSubmit}>Submit</button>}\n\n      <DisplayTax save={save} zipcode={zipcode}></DisplayTax>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}